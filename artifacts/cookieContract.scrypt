struct __scrypt_ts_Change {  int amount;  Ripemd160 address;}

contract CookieContract {
  Ripemd160 metaNetClientAddr;
  @state int cookiePrice;
  bytes __scrypt_ts_ctx_hashoutputs;
  __scrypt_ts_Change __scrypt_ts_change;
  constructor(Ripemd160 metaNetClientAddr, int cookiePrice) {
    this.metaNetClientAddr = metaNetClientAddr;
    this.cookiePrice = cookiePrice;
  }
  public function cookieSale(Ripemd160 dest, SigHashPreimage __scrypt_ts_txPreimage, int __scrypt_ts_changeAmount, Ripemd160 __scrypt_ts_changeAddress) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'c1')));
    this.__scrypt_ts_ctx_hashoutputs = SigHash.hashOutputs(__scrypt_ts_txPreimage);
    this.__scrypt_ts_change = {__scrypt_ts_changeAmount, __scrypt_ts_changeAddress};
    bytes outputs = Utils.buildOutput(Utils.buildPublicKeyHashScript(dest), 1);
    outputs += Utils.buildOutput(Utils.buildPublicKeyHashScript(this.metaNetClientAddr), this.cookiePrice);
    outputs += this.buildChangeOutput();
    require(hash256(outputs) == this.__scrypt_ts_ctx_hashoutputs);
  }
  function buildStateOutput(int amount) : bytes {  return Utils.buildOutput(this.getStateScript(), amount);}
  function buildChangeOutput() : bytes {  return this.__scrypt_ts_change.amount > 0 ? Utils.buildOutput(Utils.buildPublicKeyHashScript(this.__scrypt_ts_change.address), this.__scrypt_ts_change.amount) : b'';}
}